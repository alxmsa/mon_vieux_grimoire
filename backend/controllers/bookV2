const Book = require('../models/Book');
const sharp = require('sharp');
const fs = require ('fs');
const path = require('path');

exports.createBook = (req, res) => {
  try {
    const bookObject = JSON.parse(req.body.book);
    delete bookObject._id;
    delete bookObject._userId;

    const originalFilename = req.file.filename.split('.')[0];
    const optimizedFilename = `optimized_${originalFilename}.webp`;
    const inputPath = `images/${req.file.filename}`;
    const outputPath = `images/${optimizedFilename}`;

    console.log('📁 Fichier reçu (multer) :', req.file);

    sharp(inputPath)
      .resize({ width: 800 })
      .webp({ quality: 70 })
      .toFile(outputPath)
      .then(() => {
        console.log('✅ Conversion SHARP exécutée vers :', outputPath);

        // Supprimer l’image originale
        fs.unlink(inputPath, (err) => {
          if (err) {
            console.warn('⚠️ Impossible de supprimer l’image originale :', err);
          }
        });

        const book = new Book({
          ...bookObject,
          userId: req.auth.userId,
          imageUrl: `${req.protocol}://${req.get('host')}/images/${optimizedFilename}`,
        });

        book.save()
          .then(() => {
            console.log('📚 Livre enregistré avec succès !');
            res.status(201).json({ message: 'Livre enregistré !' });
          })
          .catch((error) => {
            console.error('❌ Erreur lors de la sauvegarde du livre :', error);
            res.status(400).json({ error });
          });
      })
      .catch((err) => {
        console.error('❌ Erreur SHARP :', err.message);
        res.status(500).json({ message: 'Erreur lors du traitement de l’image.', error: err.message });
      });

  } catch (error) {
    console.error('❌ Erreur parsing ou structure JSON :', error.message);
    res.status(400).json({ message: 'Données du livre invalides.', error: error.message });
  }
};

exports.modifyBook = (req, res) => {
  Book.updateOne({ _id: req.params.id }, { ...req.body, _id: req.params.id })
    .then(() => res.status(200).json({ message: 'Livre modifié !' }))
    .catch((error) => res.status(400).json({ error }));
};

exports.deleteBook = (req, res) => {
  Book.deleteOne({ _id: req.params.id })
    .then(() => res.status(200).json({ message: 'Livre supprimé !' }))
    .catch((error) => res.status(400).json({ error }));
};

exports.getOneBook = (req, res) => {
  Book.findOne({ _id: req.params.id })
    .then((book) => res.status(200).json(book))
    .catch((error) => res.status(404).json({ error }));
};

exports.getAllBooks = (req, res) => {
  Book.find()
    .then((books) => res.status(200).json(books))
    .catch((error) => res.status(400).json({ error }));
};

exports.rateBook = (req, res) => {
  const { rating } = req.body; // La note envoyée par l'utilisateur (ex: { "rating": 4 })
  const userId = req.auth.userId; // L'utilisateur connecté qui note le livre

  Book.findOne({ _id: req.params.id })
    .then((book) => {
      if (!book) {
        return res.status(404).json({ message: 'Livre non trouvé !' });
      }

      // Vérifier si l'utilisateur a déjà noté ce livre
      const existingRating = book.ratings.find(r => r.userId === userId);
      if (existingRating) {
        return res.status(400).json({ message: 'Vous avez déjà noté ce livre.' });
      }

      // Ajouter la nouvelle note dans le tableau `ratings`
      book.ratings.push({ userId, grade: rating });

      // Recalculer `averageRating`
      const totalRatings = book.ratings.length;
      const sumRatings = book.ratings.reduce((sum, r) => sum + r.grade, 0);
      book.averageRating = (sumRatings / totalRatings).toFixed(1); // Arrondi à 1 décimale

      // Sauvegarder les modifications
      book.save()
        .then(() => res.status(200).json(book))
        .catch((error) => res.status(400).json({ error }));
    })
    .catch((error) => res.status(500).json({ error }));
};

exports.bestBooks = (req, res) => {
  Book.find()
    .sort({ averageRating: -1 })
    // 🔹 Trie par `averageRating` en ordre décroissant (du + grand au + petit)
    .limit(3) // 🔹 Garde seulement les 3 premiers résultats
    .then((books) => res.status(200).json(books)) // 🔹 Renvoie les livres sous forme JSON
    .catch((error) => res.status(400).json({ error }));
};
